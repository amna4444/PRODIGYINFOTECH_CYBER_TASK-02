from PIL import Image
import random
import numpy as np


def swap_pixels(image_array, key):
  """Swaps pixel values based on a key offset"""
  rows, cols, depth = image_array.shape
  for i in range(rows):
    for j in range(cols):
      new_i = (i + key) % rows
      new_j = (j + key) % cols
      image_array[i, j], image_array[new_i, new_j] = image_array[new_i, new_j], image_array[i, j]


def encrypt_image(input_path, output_path, key):
  """Encrypts an image using pixel swap and XOR"""
  try:
    image = Image.open(input_path)
    image_array = np.array(image)
    swap_pixels(image_array, key)
    encrypted_array = np.bitwise_xor(image_array, key)
    encrypted_image = Image.fromarray(encrypted_array)
    encrypted_image.save(output_path)
    print(f"Image encrypted to {output_path}")
  except Exception as e:
    print(f"Error encrypting image: {e}")


def decrypt_image(input_path, output_path, key):
  """Decrypts an image using pixel swap and XOR (reverse of encryption)"""
  try:
    image = Image.open(input_path)
    image_array = np.array(image)
    decrypted_array = np.bitwise_xor(image_array, key)
    swap_pixels(decrypted_array, -key)  # Reverse swap with negative key
    decrypted_image = Image.fromarray(decrypted_array)
    decrypted_image.save(output_path)
    print(f"Image decrypted to {output_path}")
  except Exception as e:
    print(f"Error decrypting image: {e}")


# Example usage
input_path = r"c:\Users\lenovo\OneDrive\Desktop\project\FELV-cat.jpg"
output_path_encrypted = r"c:\Users\lenovo\Downloads\mountain.jpg"
output_path_decrypted = r"c:\Users\lenovo\Downloads\tree.jpeg"
key = random.randint(1, 255)  # Random key between 1 and 255

# Encrypt the image
encrypt_image(input_path, output_path_encrypted, key)

# Decrypt the image
decrypt_image(output_path_encrypted, output_path_decrypted, key)

print("Encryption and decryption complete!")
